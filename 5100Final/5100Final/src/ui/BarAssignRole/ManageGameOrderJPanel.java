/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ui.BarAssignRole;


import Business.DB4OUtil.DB4OUtil;
import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.WorldCupFansOrganization;
import Business.Organization.CheerAgencyOrganization;
import Business.Organization.Organization;
import Business.Organization.BarAssignOrganization;


import Business.UserAccount.UserAccount;
import Business.WorkQueue.Game;
import Business.WorkQueue.Bar;
import Business.WorkQueue.Status;
import Business.WorkQueue.WorkRequest;
import Business.WorkQueue.WorkSend;
import java.awt.CardLayout;
import java.util.Date;
import javax.swing.JOptionPane;
import java.awt.Component;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Jinlang
 */
public class ManageGameOrderJPanel extends javax.swing.JPanel {
    private JPanel userProcessContainer;
    private UserAccount userAccount;
    private BarAssignOrganization stadiumAssignOrganization;
    private WorldCupFansOrganization  concertOrganization;
    private Enterprise enterprise;
    private EcoSystem business;

    public ManageGameOrderJPanel(
            JPanel userProcessContainer,
            UserAccount userAccount, 
            BarAssignOrganization stadiumAssignOrganization,
            WorldCupFansOrganization concertOrganization, 
            Enterprise enterprise, 
            EcoSystem business) {
        initComponents();
        this.setSize(850, 800);
        this.userProcessContainer = userProcessContainer;
        this.userAccount = userAccount;
        this.stadiumAssignOrganization = stadiumAssignOrganization;
        this.concertOrganization = concertOrganization;
        this.business = business;
        this.enterprise = enterprise;
        
        populateStadiumOrderJTable();
        
    }
    
    public void populateStadiumOrderJTable() {
        DefaultTableModel model = (DefaultTableModel) stadiumOrderJTable.getModel();
        model.setRowCount(0);
        for (WorkRequest wr : stadiumAssignOrganization.getWorkQueue().getWorkRequestList()) {
            if(wr instanceof WorkSend){
                WorkSend ws = (WorkSend) wr;
                Object[] row = new Object[7];
                row[0] = ws;
                row[1] = ws.getStadium().getStadiumName();
                row[2] = ws.getSender();
                row[3] = ws.getRequestDate();
                row[4] = ws.getCompleteDate();
                row[5] = ws.getStatus();
                
                model.addRow(row); 
            }
            
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        stadiumOrderJTable = new javax.swing.JTable();
        btnAcceptBookStadium = new javax.swing.JButton();
        btnRefuseBookStadium = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(null);

        jLabel1.setFont(new java.awt.Font("Bodoni MT", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Bar Assign Part");
        add(jLabel1);
        jLabel1.setBounds(60, 10, 321, 43);

        jLabel2.setFont(new java.awt.Font("Bodoni MT", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Manage Game Order");
        add(jLabel2);
        jLabel2.setBounds(320, 200, 253, 30);

        stadiumOrderJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Order", "Bar", "Sender", "Request Date", "Complete Date", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(stadiumOrderJTable);

        add(jScrollPane1);
        jScrollPane1.setBounds(130, 290, 691, 155);

        btnAcceptBookStadium.setBackground(new java.awt.Color(255, 255, 255));
        btnAcceptBookStadium.setFont(new java.awt.Font("Bodoni MT", 1, 14)); // NOI18N
        btnAcceptBookStadium.setText("Accept");
        btnAcceptBookStadium.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAcceptBookStadiumActionPerformed(evt);
            }
        });
        add(btnAcceptBookStadium);
        btnAcceptBookStadium.setBounds(260, 490, 91, 29);

        btnRefuseBookStadium.setBackground(new java.awt.Color(255, 255, 255));
        btnRefuseBookStadium.setFont(new java.awt.Font("Bodoni MT", 1, 14)); // NOI18N
        btnRefuseBookStadium.setText("Refuse");
        btnRefuseBookStadium.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefuseBookStadiumActionPerformed(evt);
            }
        });
        add(btnRefuseBookStadium);
        btnRefuseBookStadium.setBounds(510, 490, 93, 29);

        btnBack.setBackground(new java.awt.Color(255, 255, 255));
        btnBack.setFont(new java.awt.Font("Bodoni MT", 1, 14)); // NOI18N
        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        add(btnBack);
        btnBack.setBounds(50, 90, 77, 29);

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ui/watch games at bar-2.jpeg"))); // NOI18N
        jLabel4.setText("jLabel4");
        add(jLabel4);
        jLabel4.setBounds(0, -10, 1160, 960);
    }// </editor-fold>//GEN-END:initComponents

    private void btnAcceptBookStadiumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAcceptBookStadiumActionPerformed
        // TODO add your handling code here:
        //select a row
        int selectedRowIndex = stadiumOrderJTable.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row from the table first", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        WorkSend workSend = (WorkSend) stadiumOrderJTable.getValueAt(selectedRowIndex, 0);
        
        workSend.setStatus(Status.BarAccept);
            workSend.setCompleteDate(new Date());
            for(WorkRequest wr : concertOrganization.getWorkQueue().getWorkRequestList()){
                if(wr instanceof WorkSend){
                    WorkSend ws = (WorkSend) wr;
                    if(ws.getConcert().getConcertName().equals(workSend.getConcert().getConcertName())){
                        ws.setStatus(Status.BarAccept);
                        ws.setCompleteDate(new Date());
                    }
                }
            }
        JOptionPane.showMessageDialog(this, "Bar assign accept the request!", "Information", JOptionPane.DEFAULT_OPTION);
            
            
       
        
        populateStadiumOrderJTable();
        DB4OUtil.getInstance().storeSystem(business);
    }//GEN-LAST:event_btnAcceptBookStadiumActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        Component[] componentArray = userProcessContainer.getComponents();
        Component component = componentArray[componentArray.length - 1];
        BarAssignWorkJPanel aswj = (BarAssignWorkJPanel) component;
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnRefuseBookStadiumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefuseBookStadiumActionPerformed
        // TODO add your handling code here:
        //select a row
        int selectedRowIndex = stadiumOrderJTable.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row from the table first", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        WorkSend workSend = (WorkSend) stadiumOrderJTable.getValueAt(selectedRowIndex, 0);
        
        workSend.setStatus(Status.BarRefuse);
        for(WorkRequest wr : concertOrganization.getWorkQueue().getWorkRequestList()){
            if(wr instanceof WorkSend){
                WorkSend ws = (WorkSend) wr;
                if(ws.getConcert().getConcertName().equals(workSend.getConcert().getConcertName())){
                    ws.setStatus(Status.BarRefuse);
                }
            }
        }
        JOptionPane.showMessageDialog(this, "Bar assign refuse the request!", "Information", JOptionPane.DEFAULT_OPTION);
        populateStadiumOrderJTable();
        DB4OUtil.getInstance().storeSystem(business);
    }//GEN-LAST:event_btnRefuseBookStadiumActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAcceptBookStadium;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnRefuseBookStadium;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable stadiumOrderJTable;
    // End of variables declaration//GEN-END:variables
}
